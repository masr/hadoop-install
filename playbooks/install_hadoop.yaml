- name: Install hadoop for config group {{ config_group_name }}
  hosts: "{{ variable_hosts | default('all') }}"
  tasks:
    - name: load vars
      include_vars: file="{{ vars_file | default('vars/default.yaml') }}"

    - name: before install preparation
      include: before_install_service.yaml

    - name: sync hadoop release
      unarchive: src=../releases/{{ hadoop_release_tarball }} dest={{ install_base_dir }}/releases owner=root group=hadoop
      when: (sync_release is not defined) or (sync_release is defined and sync_release|bool)

    - name: create hadoop soft link
      file: src=releases/{{ hadoop_release_version }} path={{ install_base_dir }}/hadoop state=link


    - name: create runtime dir for hdfs
      file: path={{ item }} state=directory mode=0755 owner=hdfs group=hadoop
      with_items:
        - "{{ install_base_dir }}/run/hdfs"

    - name: create runtime dir for yarn
      file: path={{ item }} state=directory mode=0755 owner=yarn group=hadoop
      with_items:
        - "{{ install_base_dir }}/run/yarn"

    - name: create hdfs log dir
      file: path={{ item }} state=directory mode=0775 owner=hdfs group=hadoop
      with_items:
        - "{{hadoop_log_dir}}/hdfs"

    - name: create yarn log dir
      file: path={{ item }} state=directory mode=0775 owner=yarn group=hadoop
      with_items:
        - "{{hadoop_log_dir}}/yarn"

    - name: create hadoop confs dir
      file: path={{ item }} state=directory mode=0755 owner=root group=hadoop recurse=yes
      with_items:
        - "{{ install_base_dir }}/confs/hadoop/conf"

    - name: sync hadoop confs
      copy: src={{ group_conf_dir }}/{{ item }} dest={{ install_base_dir }}/confs/hadoop/conf/{{ item }} mode=0644 owner=root group=hadoop
      with_items:
        - core-site.xml
        - hdfs-site.xml
        - yarn-site.xml
        - hadoop-env.sh
        - yarn-env.sh
        - log4j.properties

    - name: sync container-executor.cfg
      copy: src={{ group_conf_dir }}/{{ item }} dest={{ install_base_dir }}/confs/hadoop/conf/{{ item }} mode=0400 owner=root group=hadoop
      with_items:
        - container-executor.cfg

    - name: delete original  hadoop_dir/etc/hadoop
      file: path={{ install_base_dir }}/hadoop/etc/hadoop state=absent

    - name: create hadoop conf soft link
      file: src={{ install_base_dir }}/confs/hadoop/conf path={{ install_base_dir }}/hadoop/etc/hadoop state=link force=yes


    - name: create namenode dir
      file: path={{ item }} state=directory mode=0755 owner=hdfs group=hadoop recurse=yes
      with_items: "{{dfs_namenode_name_dir}}"
      when: '"namenode" in group_names'

    - name: create datanode dir
      file: path={{ item }} state=directory mode=0755 owner=hdfs group=hadoop recurse=yes
      with_items: "{{dfs_datanode_data_dir}}"
      when: '"datanode" in group_names'

    - name: create nodemanager log dirs
      file: path={{ item }} state=directory mode=0755 owner=yarn group=hadoop recurse=yes
      with_items: "{{yarn_nodemanager_log_dirs}}"
      when: '"node_manager" in group_names'

    - name: create nodemanager local dir
      file: path={{ item }} state=directory mode=0755 owner=yarn group=hadoop recurse=yes
      with_items: "{{yarn_nodemanager_local_dirs}}"
      when: '"node_manager" in group_names'

    - name: create journal node dir
      file: path={{ item }} state=directory mode=0755 owner=hdfs group=hadoop recurse=yes
      with_items:
        - "{{dfs_journalnode_edits_dir}}"
      when: '"journal_node" in group_names'


    - name: install datanode.service
      template: src="files/datanode.service.j2" dest=/usr/lib/systemd/system/datanode.service group=root owner=root mode=0644
      when: '"datanode" in group_names'

    - name: install namenode.service
      template: src="files/namenode.service.j2" dest=/usr/lib/systemd/system/namenode.service group=root owner=root mode=0644
      when: '"namenode" in group_names'

    - name: install zkfc.service
      template: src="files/zkfc.service.j2" dest=/usr/lib/systemd/system/zkfc.service group=root owner=root mode=0644
      when: '"namenode" in group_names'

    - name: install journal_node.service
      template: src="files/journal_node.service.j2" dest=/usr/lib/systemd/system/journal_node.service group=root owner=root mode=0644
      when: '"journal_node" in group_names'

    - name: install nodemanager.service
      template: src="files/nodemanager.service.j2" dest=/usr/lib/systemd/system/nodemanager.service group=root owner=root mode=0644
      when: '"nodemanager" in group_names'

    - name: install resource_manager.service
      template: src="files/resourcemanager.service.j2" dest=/usr/lib/systemd/system/resource_manager.service group=root owner=root mode=0644
      when: '"resource_manager" in group_names'

    - name: reload services
      command: systemctl daemon-reload

    - name: enable datanode service
      command: systemctl enable datanode
      when: '"datanode" in group_names'

    - name: enable namenode & zkfc service
      command: systemctl enable namenode zkfc
      when: '"namenode" in group_names'

    - name: enable journal_node service
      command: systemctl enable journal_node
      when: '"journal_node" in group_names'

    - name: enable nodemanager service
      command: systemctl enable nodemanager
      when: '"nodemanager" in group_names'

    - name: enable resource_manager service
      command: systemctl enable resource_manager
      when: '"resource_manager" in group_names'
